{"version":3,"sources":["Recipe.js","Home.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","id","useParams","query","useState","recipe","setRecipe","useEffect","window","fetch","process","method","headers","Authorization","body","JSON","stringify","then","response","json","data","errors","console","error","log","recipeName","recipeTags","contentfulMetadata","tags","forEach","tag","push","name","className","src","picture","url","alt","join","documentToReactComponents","ingredients","instructions","course","Home","recipes","setRecipes","recipeNameCollection","items","map","to","sys","Header","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0deeac7c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer'\n\nfunction Recipe() {\n    const spaceId = process.env.REACT_APP_DEV_CONTENTFUL_SPACE_ID\n    const accessToken = process.env.REACT_APP_DEV_CONTENTFUL_ACCESS_TOKEN\n    const { id } = useParams();\n    const query = `\n    {\n        recipeName(id: \"${id}\") {\n            name,\n            picture {\n                url\n            },\n            instructions {json},\n            ingredients {json},\n            contentfulMetadata {tags\n                {name}\n            },\n            course\n        }\n    }`\n    const [recipe, setRecipe] = useState(null)\n\n\n    useEffect(() => {\n        window\n            .fetch(`https://graphql.contentful.com/content/v1/spaces/${spaceId}/`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    // Authenticate the request\n                    Authorization: `Bearer ${accessToken}`,\n                },\n                // send the GraphQL query\n                body: JSON.stringify({ query }),\n            })\n            .then((response) => response.json())\n            .then(({ data, errors }) => {\n                if (errors) {\n                    console.error(errors);\n                }\n                console.log(data.recipeName)\n                // rerender the entire component with new data\n                setRecipe(data.recipeName);\n            });\n    }, []);\n\n    if (!recipe) {\n        return \"Loading...\";\n    }\n\n    let recipeTags = []\n    recipe.contentfulMetadata.tags.forEach(tag => recipeTags.push(tag.name))\n    console.log(recipeTags)\n\n    return (\n        <div className=\"recipePage\">\n            <img src={recipe.picture.url} alt={recipe.name} />\n            <h2>{recipe.name}</h2>\n            <div className=\"recipeField recipeTags\">\n                <span>Tags: </span>\n                {\n                    <span>{recipeTags.join(', ')}</span>\n                }\n            </div>\n            <div className=\"recipeField recipeIngredients\">\n                <h4>Ingredients:</h4>\n                {documentToReactComponents(recipe.ingredients.json)}\n            </div>\n            <div className=\"recipeField recipeInstructions\">\n                <h4>Instructions:</h4>\n                {documentToReactComponents(recipe.instructions.json)}\n            </div>\n            <div className=\"recipeField recipeCourse\">\n                <span>Course: </span><span>{recipe.course}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Recipe","import React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\"\n\nfunction Home() {\n    const spaceId = process.env.REACT_APP_DEV_CONTENTFUL_SPACE_ID\n    const accessToken = process.env.REACT_APP_DEV_CONTENTFUL_ACCESS_TOKEN\n    const query = `\n  {\n    recipeNameCollection {\n      items {\n        sys{id},\n        contentfulMetadata{tags \n          {name}\n        },\n        name,\n        course,\n        picture {\n          url\n        }\n      }\n    }\n  }`\n\n    const [recipes, setRecipes] = useState(null);\n\n    useEffect(() => {\n        window\n            .fetch(`https://graphql.contentful.com/content/v1/spaces/${spaceId}/`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    // Authenticate the request\n                    Authorization: `Bearer ${accessToken}`,\n                },\n                // send the GraphQL query\n                body: JSON.stringify({ query }),\n            })\n            .then((response) => response.json())\n            .then(({ data, errors }) => {\n                if (errors) {\n                    console.error(errors);\n                }\n                console.log(data.recipeNameCollection)\n                // rerender the entire component with new data\n                setRecipes(data.recipeNameCollection.items);\n            });\n    }, []);\n\n    if (!recipes) {\n        return \"Loading...\";\n    }\n    return (<>\n        {\n            recipes.map((recipe) => {\n                let recipeTags = []\n                recipe.contentfulMetadata.tags.forEach(tag => recipeTags.push(tag.name))\n                return (\n                    <div className=\"recipeCard\" key={recipe.sys.id}>\n                        <NavLink to={`/recipe/${recipe.sys.id}`}>\n                            <img src={recipe.picture.url} alt={recipe.name} />\n                            <h3>{recipe.name}</h3>\n                            <div className=\"recipeField recipeCourse\">\n                                <span>Course: </span><span>{recipe.course}</span>\n                            </div>\n                            <div className=\"recipeField recipeTags\">\n                                <span>Tags: </span>\n                                {\n                                    <span>{recipeTags.join(', ')}</span>\n                                }\n                            </div>\n                        </NavLink>\n                    </div>\n                )\n            })\n        }\n    </>)\n}\n\nexport default Home","import React from \"react\";\nimport {NavLink} from \"react-router-dom\"\n\nfunction Header () {\n    return (\n        <header className=\"App-header\">\n            <NavLink to=\"/\">\n                <h1>Contentful Cookbook</h1>\n            </NavLink>\n        </header>\n    )\n}\n\nexport default Header","import './App.css';\nimport { Switch, Route } from \"react-router-dom\";\nimport Recipe from './Recipe';\nimport Home from './Home';\nimport Header from './Header';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <Header />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        <Route path=\"/recipe/:id\">\n          <Recipe />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}